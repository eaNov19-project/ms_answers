#for testing local only - uncomment it
server.port=${SERVER_PORT:8082}

spring.data.mongodb.authentication-database=${MONGODB_AUTH:answers}
spring.data.mongodb.database=${MONGODB_DATABASE:answers}
spring.data.mongodb.host=${MONGODB_HOST:localhost}
spring.data.mongodb.username=${MONGODB_USERNAME:answers}
spring.data.mongodb.password=${MONGODB_PASS:answers}
spring.data.mongodb.port=${MONGODB_PORT:27017}
spring.data.mongodb.repositories.type=auto

#for testing local only - uncomment it
#spring.data.mongodb.uri=mongodb://localhost/questions

service.secret=${SERVICE_SECRET:service-secret}

#kafka
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:34.70.124.18:31090,34.68.183.147:31090,35.223.233.128:31090}

#for testing local only - uncomment it (use for auth service on google cloud)
authenticate.service=${AUTHENTICATE_SERVICE:http://35.241.22.50}

#for testing local only - uncomment it (use for auth service on local)
#AUTHENTICATE_SERVICE=localhost:8090

# kafka config
#2. new answer
topicNewAnswer=${TOPIC_NEW_ANSWER:topicNewAnswer}

# 4. answer voted up or down
topicAnswerVoted=${TOPIC_ANSWER_VOTED:topicAnswerVoted}

#6. new answer comment
topicNewAnswerComment=${TOPIC_NEW_ANSWER_COMMENT:topicNewAnswerComment}
subsNewAnswerCommentToAnswers=${SUBS_NEW_ANSWER_COMMENT_TO_ANSWER:subsNewAnswerCommentToAnswers}

#8. when answer banned
topicBanAnswer=${TOPIC_BAN_ANSWER:topicBanAnswer}
subsBanAnswerToAnswer=${SUBS_BAN_ANSWER_TO_ANSWER:subsBanAnswerToAnswer}

#9. after banned answer updated in Answers service
topicUpdateBannedAnswer=${TOPIC_UPDATE_BANNED_ANSWER:topicUpdateBannedAnswer}

