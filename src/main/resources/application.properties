#for testing local only - uncomment it
server.port=8081

#spring.data.mongodb.authentication-database=answers
#spring.data.mongodb.database=answers
#spring.data.mongodb.host=localhost
#spring.data.mongodb.username=answers
#spring.data.mongodb.password=answers
#spring.data.mongodb.port=27017
#spring.data.mongodb.repositories.type=auto
spring.data.mongodb.authentication-database=${MONGODB_AUTH:answers}
spring.data.mongodb.database=${MONGODB_DATABASE:answers}
spring.data.mongodb.host=${MONGODB_HOST:localhost}
spring.data.mongodb.username=${MONGODB_USERNAME:answers}
spring.data.mongodb.password=${MONGODB_PASS:answers}
spring.data.mongodb.port=${MONGODB_PORT:27017}
spring.data.mongodb.repositories.type=auto
#spring.data.mongodb.uri=mongodb://localhost/questions
spring.kafka.bootstrap-servers=34.70.124.18:31090,34.68.183.147:31090,35.223.233.128:31090
#feign.url=${FEIGN_URL:http://104.154.33.123:8080/auth}
#feign.name=${FEIGN_NAME:authms}

#for testing local only - uncomment it (use for auth service on google cloud)
AUTHENTICATE_SERVICE=http://104.197.96.11:8080

#for testing local only - uncomment it (use for auth service on local)
#AUTHENTICATE_SERVICE=localhost:8090

# kafka config
#2. new answer
topicNewAnswer=${TOPIC_NEW_ANSWER:topicNewAnswer}

# 4. answer voted up or down
TOPIC_ANSWER_VOTED=${TOPIC_NEW_ANSWER:topicAnswerVoted}

#6. new answer comment
topicNewAnswerComment=${TOPIC_NEW_ANSWER_COMMENT:topicNewAnswerComment}
subsNewAnswerCommentToAnswers=${SUBS_NEW_ANSWER_COMMENT_TO_ANSWER:subsNewAnswerCommentToAnswers}

#8. when answer banned
topicBanAnswer=${TOPIC_BAN_ANSWER:topicBanAnswer}
subsBanAnswerToAnswer=${SUBS_BAN_ANSWER_TO_ANSWER:subsBanAnswerToAnswer}


